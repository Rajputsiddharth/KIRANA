USE kirana;
-- Query 1
-- Update the price of all products in a specific category to be 30% higher
UPDATE Product p
INNER JOIN Category c ON p.category_id = c.category_id
SET p.price = p.price * 1.3
WHERE c.name = 'Fruits';


-- Query 2
-- Calculate the average rating of each product and display the result along with the product name:
SELECT p.product_id, p.name, AVG(p.rating) AS avg_rating
FROM Product p
GROUP BY p.product_id
ORDER BY avg_rating ASC;


-- Query 3
-- Query to find the top 30 customers based on their total spending
SELECT c.first_name, c.last_name, SUM(o.total_cost) AS total_spending
FROM Customer c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id
ORDER BY total_spending DESC
LIMIT 30;


-- Query 4
-- Show the delivery status of each order
SELECT o.order_id, s.delivery_date, s.delivery_status
FROM Orders o
LEFT JOIN Shipment s ON o.order_id = s.order_id;


-- Query 5
-- updates the order table based on the products purchased in the Purchased table, and the actual prices of those products are to be taken from the Product table
SET SQL_SAFE_UPDATES=0;

UPDATE Orders 
SET total_cost = (SELECT SUM(p.quantity * pr.price) 
                  FROM Purchased p 
                  INNER JOIN Product pr ON p.product_id = pr.product_id 
                  WHERE p.order_id = Orders.order_id)
WHERE EXISTS 
    (SELECT 1 
     FROM Purchased 
     WHERE order_id = Orders.order_id
     );
     
SET SQL_SAFE_UPDATES=1;

-- Query 6
-- the total revenue by category for a year
SELECT c.name AS category_name, SUM(o.total_cost) AS revenue
FROM Orders o
JOIN Purchased p ON o.order_id = p.order_id
JOIN Product pr ON p.product_id = pr.product_id
JOIN Category c ON pr.category_id = c.category_id
WHERE YEAR(o.order_date) = 2022
GROUP BY c.name
ORDER BY revenue DESC;


-- Query 7
-- Calculate the age based on the date of birth and add it to the customer table and delete if age is less than 3
SET SQL_SAFE_UPDATES=0;
ALTER TABLE Customer
ADD age INT;
UPDATE Customer
SET age = FLOOR(DATEDIFF('2023-02-17', date_of_birth)/365.25);
DELETE FROM Customer WHERE age <= 3;
SET SQL_SAFE_UPDATES=1;


-- Query 8
-- Finding the average rating of each seller's products and returning only those who have an average rating above 4
SELECT s.seller_id, s.name, AVG(p.rating) as avg_rating
FROM Seller s
JOIN Product p ON p.seller_id = s.seller_id
GROUP BY s.seller_id
HAVING avg_rating > 4;

-- Query 9
-- Subtract the quantity from the product 
SELECT p.product_id, p.quantity - COALESCE(SUM(pr.quantity), 0) as available_quantity
FROM Product p
LEFT JOIN Purchased pr ON p.product_id = pr.product_id
GROUP BY p.product_id
HAVING available_quantity >= 0;


-- Query 10
-- the total revenue generated by a seller for a given time period
SELECT SUM(total_cost) AS revenue
FROM Orders
INNER JOIN Purchased ON Orders.order_id = Purchased.order_id
INNER JOIN Product ON Purchased.product_id = Product.product_id
WHERE Product.seller_id = 1
AND order_date BETWEEN '2022-01-01' AND '2022-12-31';










